// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum StoreType {
  STORE
  HOTEL
  RESTAURANT
  CAFE
  BAR
  OTHER
}

model Store {
  id     Int @id @default(autoincrement())
  uuid   String @default(cuid()) @unique
  name   String
  type   StoreType
  userId String

  billboards Billboard[] @relation("StoreToBillboard")
  category   Category[]  @relation("StoreToCategory")
  sizes      Size[]      @relation("StoreToSize")
  colors     Color[]     @relation("StoreToColor")
  products   Product[]   @relation("StoreToProduct")
  orders     Order[]     @relation("StoreToOrder")
  zcategory  ZCategory[] @relation("StoreToZcategory")
  tags       Tag[]       @relation("StoreToTag")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Billboard {
  id     Int @id @default(autoincrement())
  uuid   String @default(cuid()) @unique
  storeId    String
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [uuid])
  label      String
  imageUrl   String
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @default(now()) @updatedAt

  @@index([storeId])
}

model Category {
  id     Int @id @default(autoincrement())
  uuid   String @default(cuid()) @unique
  name String

  storeId String
  store   Store  @relation("StoreToCategory", fields: [storeId], references: [uuid])

  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [uuid])

  products Product[] @relation("CateToProduct")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id     Int @id @default(autoincrement())
  uuid   String @default(cuid()) @unique

  storeId String
  store   Store  @relation("StoreToSize", fields: [storeId], references: [uuid])

  products Product[]

  name  String
  value String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([storeId])
}

model Color {
  id     Int @id @default(autoincrement())
  uuid   String @default(cuid()) @unique

  storeId String
  store   Store  @relation("StoreToColor", fields: [storeId], references: [uuid])

  products Product[]

  name  String
  value String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([storeId])
}

model Product {
  id     Int @id @default(autoincrement())
  uuid   String @default(cuid()) @unique

  name        String
  description String
  price       Decimal        @default(0)
  isFeatured  Boolean        @default(false)
  isArchived  Boolean        @default(false)
  images      Image[]
  orders      OrderItem[]
  tags        Tag[]

  categoryId String
  category   Category @relation("CateToProduct", fields: [categoryId], references: [uuid])

  storeId String
  store   Store  @relation("StoreToProduct", fields: [storeId], references: [uuid])

  sizeId String
  size   Size   @relation(fields: [sizeId], references: [uuid])

  colorId String
  color   Color  @relation(fields: [colorId], references: [uuid])

  zcategoryId String
  zcategory   ZCategory @relation(fields: [zcategoryId], references: [uuid])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([zcategoryId])
  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Tag {
  id     Int @id @default(autoincrement())
  uuid   String @default(cuid()) @unique

  name  String
  value String

  productId String?
  product   Product? @relation(fields: [productId], references: [uuid], onDelete: Cascade)

  storeId String
  store   Store  @relation("StoreToTag", fields: [storeId], references: [uuid])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([storeId])
  @@index([productId])
}

model ZCategory {
  id     Int @id @default(autoincrement())
  uuid   String @default(cuid()) @unique

  name  String
  value String

  products Product[]

  storeId String
  store   Store  @relation("StoreToZcategory", fields: [storeId], references: [uuid])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([storeId])
}

model Image {
  id     Int @id @default(autoincrement())
  uuid   String @default(cuid()) @unique

  url String

  productId String
  product   Product @relation(fields: [productId], references: [uuid], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([productId])
}

model Order {
  id     Int @id @default(autoincrement())
  uuid   String @default(cuid()) @unique

  orderItems OrderItem[]
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")

  storeId String
  store   Store  @relation("StoreToOrder", fields: [storeId], references: [uuid])

  total     Decimal  @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([storeId])
}

model OrderItem {
  id     Int @id @default(autoincrement())
  uuid   String @default(cuid()) @unique

  orderId String
  order   Order  @relation(fields: [orderId], references: [uuid], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [uuid])

  @@index([orderId])
  @@index([productId])
}
