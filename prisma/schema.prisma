// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum StoreType {
  STORE
  HOTEL
  FARM
}

enum SoldCurrencyType {
  LEKE
  DOLLAR
  EURO
  POUND
  OTHER
}

enum UniteType {
  cope
  kg
  person
  m3
  liter
}

enum UserType {
  ADMIN
  USER
  NONE
  BASIC
  CLIENT
  STAFF
  MANAGER
}

enum FeedType {
  ANIMALS
  BARNS
  TREES
}

enum MedicineType {
  ANIMALS
  BARNS
  TREES
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////// USER

model User {
  id       Int      @id @default(autoincrement())
  uuid     String   @unique @default(cuid())
  email    String   @unique
  username String   @unique
  password String
  name     String
  phone    String
  address  String
  role     UserType @default(NONE)
  active   Boolean  @default(false)
  status   String   @default("Pending")

  hotel_filter_row      String  @default("4")
  hotel_total_revenue   Boolean @default(true)
  hotel_total_booking   Boolean @default(true)
  hotel_total_rooms     Boolean @default(true)
  hotel_total_clients   Boolean @default(true)
  hotel_monthly_revenue Boolean @default(true)
  hotel_monthly_booking Boolean @default(true)
  hotel_monthly_clients Boolean @default(true)

  store_filter_row     String  @default("4")
  store_total_revenue  Boolean @default(true)
  store_total_sales    Boolean @default(true)
  store_total_products Boolean @default(true)
  store_total_category Boolean @default(true)
  store_total_sizes    Boolean @default(true)
  store_total_colors   Boolean @default(true)
  store_total_tags     Boolean @default(true)

  farm_filter_row      String  @default("6")
  farm_count_location  Boolean @default(true)
  farm_count_animal    Boolean @default(true)
  farm_count_field     Boolean @default(true)
  farm_count_worker    Boolean @default(true)
  farm_count_tree      Boolean @default(true)
  farm_count_barn      Boolean @default(true)
  farm_count_equipment Boolean @default(true)
  farm_count_vehicle   Boolean @default(true)

  StoreToUser     StoreToUser[]
  CalendarBooking CalendarBooking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////// Many to Many

model StoreToUser {
  id      Int    @id @default(autoincrement())
  uuid    String @unique @default(cuid())
  userId  String
  user    User   @relation(fields: [userId], references: [uuid])
  storeId String
  store   Store  @relation(fields: [storeId], references: [uuid])

  @@index([userId])
  @@index([storeId])
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////// Main Store

model Store {
  id     Int       @id @default(autoincrement())
  uuid   String    @unique @default(cuid())
  name   String
  type   StoreType
  userId String?

  billboards Billboard[] @relation("StoreToBillboard")
  category   Category[]  @relation("StoreToCategory")
  sizes      Size[]      @relation("StoreToSize")
  colors     Color[]     @relation("StoreToColor")
  products   Product[]   @relation("StoreToProduct")
  orders     Order[]     @relation("StoreToOrder")
  tags       Tag[]       @relation("StoreToTag")

  CalendarFloor   CalendarFloor[]   @relation("FloorToStore")
  CalendarRoom    CalendarRoom[]    @relation("RoomToStore")
  CalendarBooking CalendarBooking[] @relation("BookingToStore")
  CalendarAddon   CalendarAddon[]   @relation("AddonToStore")

  FarmLocation     FarmLocation[]     @relation("FarmLocationToStore")
  FarmAnimal       FarmAnimal[]       @relation("FarmAnimalToStore")
  FarmField        FarmField[]        @relation("FarmFieldToStore")
  FarmBarn         FarmBarn[]         @relation("FarmBarnToStore")
  FarmTree         FarmTree[]         @relation("FarmTreeToStore")
  FarmVehicle      FarmVehicle[]      @relation("FarmVehicleToStore")
  FarmWorker       FarmWorker[]       @relation("FarmWorkerToStore")
  FarmEquipment    FarmEquipment[]    @relation("FarmEquipmentToStore")
  FarmMedicine     FarmMedicine[]     @relation("FarmMedicineToStore")
  FarmOrder        FarmOrder[]        @relation("FarmOrderToStore")
  FarmHarvest      FarmHarvest[]      @relation("FarmHarvestToStore")
  FarmFeed         FarmFeed[]         @relation("FarmFeedToStore")
  FarmFeedUsed     FarmFeedUsed[]     @relation("FarmFeedUsedToStore")
  FarmMedicineUsed FarmMedicineUsed[] @relation("FarmMedicineUsedToStore")

  StoreToUser StoreToUser[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////// STORE

model Billboard {
  id         Int        @id @default(autoincrement())
  uuid       String     @unique @default(cuid())
  storeId    String
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [uuid])
  label      String
  imageUrl   String
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @default(now()) @updatedAt

  @@index([storeId])
}

model Category {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(cuid())
  name String

  storeId String
  store   Store  @relation("StoreToCategory", fields: [storeId], references: [uuid])

  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [uuid])

  products Product[] @relation("CateToProduct")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(cuid())

  storeId String
  store   Store  @relation("StoreToSize", fields: [storeId], references: [uuid])

  products Product[]

  name  String
  value String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([storeId])
}

model Color {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(cuid())

  storeId String
  store   Store  @relation("StoreToColor", fields: [storeId], references: [uuid])

  products Product[]

  name  String
  value String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([storeId])
}

model Product {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(cuid())

  name        String
  description String
  price       Decimal     @default(0)
  isFeatured  Boolean     @default(false)
  isArchived  Boolean     @default(false)
  images      Image[]
  orders      OrderItem[]

  categoryId String
  category   Category @relation("CateToProduct", fields: [categoryId], references: [uuid])

  tagId String?
  tag   Tag?    @relation("TagToProduct", fields: [tagId], references: [uuid])

  storeId String
  store   Store  @relation("StoreToProduct", fields: [storeId], references: [uuid])

  sizeId String?
  size   Size?   @relation(fields: [sizeId], references: [uuid])

  colorId String?
  color   Color?  @relation(fields: [colorId], references: [uuid])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([tagId])
  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Tag {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(cuid())

  name  String
  value String

  products Product[] @relation("TagToProduct")

  storeId String
  store   Store  @relation("StoreToTag", fields: [storeId], references: [uuid])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([storeId])
}

model Image {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(cuid())

  url String

  productId String
  product   Product @relation(fields: [productId], references: [uuid], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([productId])
}

model Order {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(cuid())

  orderItems OrderItem[]
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")

  storeId String
  store   Store  @relation("StoreToOrder", fields: [storeId], references: [uuid])

  total     Decimal  @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([storeId])
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////// Calerdar

model OrderItem {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(cuid())

  orderId String
  order   Order  @relation(fields: [orderId], references: [uuid], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [uuid])

  @@index([orderId])
  @@index([productId])
}

model CalendarFloor {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(cuid())

  name  String
  value String

  floors CalendarRoom[]

  storeId String
  store   Store  @relation("FloorToStore", fields: [storeId], references: [uuid])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([storeId])
}

model CalendarRoom {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(cuid())

  title String
  slug  String
  price Decimal @default(0)

  floorId String?
  floor   CalendarFloor? @relation(fields: [floorId], references: [uuid])

  storeId String
  store   Store  @relation("RoomToStore", fields: [storeId], references: [uuid])

  bookings CalendarBooking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([floorId])
  @@index([storeId])
}

model CalendarAddon {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(cuid())

  title String
  price Decimal @default(0)

  storeId String
  store   Store  @relation("AddonToStore", fields: [storeId], references: [uuid])

  booking CalendarBooking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([storeId])
}

model CalendarBooking {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(cuid())

  title String

  group Int
  room  CalendarRoom @relation(fields: [group], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [uuid])

  storeId String
  store   Store  @relation("BookingToStore", fields: [storeId], references: [uuid])

  addonId       String?
  calendarAddon CalendarAddon? @relation(fields: [addonId], references: [uuid])

  start_time DateTime
  end_time   DateTime

  totalPrice Decimal @default(0)
  clients    Int?    @default(0)
  discount   Int?    @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([group])
  @@index([userId])
  @@index([storeId])
  @@index([addonId])
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

model FarmLocation {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(cuid())

  name     String
  maps     String
  maps_dsc String
  size     Int?

  storeId String
  store   Store  @relation("FarmLocationToStore", fields: [storeId], references: [uuid])

  animals    FarmAnimal[]
  fields     FarmField[]
  barns      FarmBarn[]
  trees      FarmTree[]
  vehicles   FarmVehicle[]
  workers    FarmWorker[]
  equipments FarmEquipment[]
  orders     FarmOrder[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([storeId])
}

model FarmAnimal {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(cuid())

  name        String
  quantity    Int
  information String
  feedType    String    @default("Grass")
  bought      DateTime
  sold        DateTime?
  price       Decimal?  @default(0)
  outOfUse    Boolean   @default(false)

  storeId String
  store   Store  @relation("FarmAnimalToStore", fields: [storeId], references: [uuid])

  locationId String
  location   FarmLocation @relation(fields: [locationId], references: [uuid])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([storeId])
  @@index([locationId])
}

model FarmBarn {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(cuid())

  name        String
  quantity    Int
  information String
  planted     DateTime
  harvest     DateTime?
  price       Decimal?  @default(0)

  storeId String
  store   Store  @relation("FarmBarnToStore", fields: [storeId], references: [uuid])

  locationId String
  location   FarmLocation @relation(fields: [locationId], references: [uuid])

  fieldId String
  field   FarmField @relation(fields: [fieldId], references: [uuid])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([fieldId])
  @@index([storeId])
  @@index([locationId])
}

model FarmTree {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(cuid())

  name        String
  quantity    Int
  information String
  type        String
  planted     DateTime
  harvest     DateTime?
  price       Decimal?  @default(0)

  storeId String
  store   Store  @relation("FarmTreeToStore", fields: [storeId], references: [uuid])

  locationId String
  location   FarmLocation @relation(fields: [locationId], references: [uuid])

  fieldId String
  field   FarmField @relation(fields: [fieldId], references: [uuid])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([fieldId])
  @@index([storeId])
  @@index([locationId])
}

model FarmVehicle {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(cuid())

  name        String
  quantity    Int
  plate       String
  model       String
  petrolType  String    @default("Diesel")
  information String
  bought      DateTime
  sold        DateTime?
  outOfUse    Boolean   @default(false)

  storeId String
  store   Store  @relation("FarmVehicleToStore", fields: [storeId], references: [uuid])

  locationId String
  location   FarmLocation @relation(fields: [locationId], references: [uuid])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([storeId])
  @@index([locationId])
}

model FarmWorker {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(cuid())

  name        String
  role        String
  contact     Int
  information String
  start       DateTime
  end         DateTime?
  holidays    Int?      @default(0)
  sickdays    Int?      @default(0)
  wage        Decimal?  @default(0)

  storeId String
  store   Store  @relation("FarmWorkerToStore", fields: [storeId], references: [uuid])

  locationId String
  location   FarmLocation @relation(fields: [locationId], references: [uuid])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([storeId])
  @@index([locationId])
}

model FarmEquipment {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(cuid())

  name        String
  quantity    Int
  information String
  usage       String
  bought      DateTime
  outOfUse    Boolean   @default(false)
  sold        DateTime?

  storeId String
  store   Store  @relation("FarmEquipmentToStore", fields: [storeId], references: [uuid])

  locationId String
  location   FarmLocation @relation(fields: [locationId], references: [uuid])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([storeId])
  @@index([locationId])
}

model FarmField {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(cuid())

  name        String
  size        Int
  information String
  type        String
  status      String   @default("Empty")
  created     DateTime

  trees  FarmTree[]
  plants FarmBarn[]

  storeId String
  store   Store  @relation("FarmFieldToStore", fields: [storeId], references: [uuid])

  locationId String
  location   FarmLocation @relation(fields: [locationId], references: [uuid])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([storeId])
  @@index([locationId])
}

model FarmHarvest {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(cuid())

  name      String
  quantity  Int
  productId String
  harvested DateTime

  storeId String
  store   Store  @relation("FarmHarvestToStore", fields: [storeId], references: [uuid])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([storeId])
}

model FarmMedicine {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(cuid())

  name        String
  quantity    Int
  information String
  type        MedicineType
  bought      DateTime
  outOfUse    Boolean      @default(false)
  price       Decimal?     @default(0)

  FarmMedicineUsed FarmMedicineUsed[]

  storeId String
  store   Store  @relation("FarmMedicineToStore", fields: [storeId], references: [uuid])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([storeId])
}

model FarmMedicineUsed {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(cuid())

  medicineId String
  medicine   FarmMedicine @relation(fields: [medicineId], references: [uuid])

  name        String
  quantity    Int
  used        DateTime
  information String
  productId   String

  storeId String
  store   Store  @relation("FarmMedicineUsedToStore", fields: [storeId], references: [uuid])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([storeId])
  @@index([medicineId])
}

model FarmFeed {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(cuid())

  name        String
  quantity    Int
  information String
  bought      DateTime
  type        FeedType
  outOfUse    Boolean  @default(false)
  price       Decimal? @default(0)

  FeedUsed FarmFeedUsed[]

  storeId String
  store   Store  @relation("FarmFeedToStore", fields: [storeId], references: [uuid])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([storeId])
}

model FarmFeedUsed {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(cuid())

  feedId String
  feed   FarmFeed @relation(fields: [feedId], references: [uuid])

  name        String
  quantity    Int
  used        DateTime
  information String
  productId   String

  storeId String
  store   Store  @relation("FarmFeedUsedToStore", fields: [storeId], references: [uuid])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([storeId])
  @@index([feedId])
}

model FarmOrder {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(cuid())

  name         String
  quantity     Int
  information  String
  usage        String
  bought       DateTime
  price        Decimal? @default(0)
  subscription Boolean  @default(false)

  storeId String
  store   Store  @relation("FarmOrderToStore", fields: [storeId], references: [uuid])

  locationId String
  location   FarmLocation @relation(fields: [locationId], references: [uuid])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([storeId])
  @@index([locationId])
}