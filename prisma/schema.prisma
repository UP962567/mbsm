// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id         String      @id @default(cuid())
  name       String
  userId     String
  billboards Billboard[] @relation("StoreToBillboard")
  category   Category[]  @relation("StoreToCategory")
  sizes      Size[]      @relation("StoreToSize")
  colors     Color[]     @relation("StoreToColor")
  products   Product[]   @relation("StoreToProduct")
  orders     Order[]     @relation("StoreToOrder")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now()) @updatedAt
}

model Billboard {
  id         String     @id @default(cuid())
  storeId    String
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  label      String
  imageUrl   String
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @default(now()) @updatedAt

  @@index([storeId])
}

model Category {
  id   String @id @default(cuid())
  name String

  storeId String
  store   Store  @relation("StoreToCategory", fields: [storeId], references: [id])

  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [id])

  products Product[] @relation("CateToProduct")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id        String    @id @default(cuid())
  storeId   String
  store     Store     @relation("StoreToSize", fields: [storeId], references: [id])
  products  Product[]
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt

  @@index([storeId])
}

model Color {
  id        String    @id @default(cuid())
  storeId   String
  store     Store     @relation("StoreToColor", fields: [storeId], references: [id])
  products  Product[]
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt

  @@index([storeId])
}

model Product {
  id         String  @id @default(cuid())
  name       String
  price      Decimal @default(0)
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)
  images     Image[]
  orders     OrderItem[]

  categoryId String
  category   Category @relation("CateToProduct", fields: [categoryId], references: [id])

  storeId String
  store   Store  @relation("StoreToProduct", fields: [storeId], references: [id])

  sizeId String
  size   Size   @relation(fields: [sizeId], references: [id])

  colorId String
  color   Color  @relation(fields: [colorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Image {
  id        String   @id @default(cuid())
  url       String
  
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([productId])
}

model Order {
  id         String   @id @default(cuid())
  orderItems OrderItem[]
  isPaid     Boolean  @default(false)
  phone      String  @default("")
  address    String  @default("")

  storeId    String
  store      Store    @relation("StoreToOrder",fields: [storeId], references: [id])

  total      Decimal  @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@index([storeId])
}

model OrderItem {
  id         String   @id @default(cuid())

  orderId   String
  order    Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  productId String
  product   Product  @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}