// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum StoreType {
  STORE
  HOTEL
  FARM
}

enum SoldCurrencyType {
  LEKE
  DOLLAR
  EURO
  POUND
  OTHER
}

enum UniteType {
  cope
  kg
  person
  m3
  liter
}

enum UserType {
  ADMIN
  USER
  NONE
  BASIC
  CLIENT
  STAFF
  MANAGER
}

model User {
  id       Int      @id @default(autoincrement())
  uuid     String   @unique @default(cuid())
  email    String   @unique
  username String   @unique
  password String
  name     String
  phone    String
  address  String
  role     UserType @default(NONE)

  StoreToUser StoreToUser[]

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt
  CalendarBooking CalendarBooking[]
}

model StoreToUser {
  id      Int    @id @default(autoincrement())
  uuid    String @unique @default(cuid())
  userId  String
  user    User   @relation(fields: [userId], references: [uuid])
  storeId String
  store   Store  @relation(fields: [storeId], references: [uuid])

  @@index([userId])
  @@index([storeId])
}

model Store {
  id     Int       @id @default(autoincrement())
  uuid   String    @unique @default(cuid())
  name   String
  type   StoreType
  userId String?

  billboards Billboard[] @relation("StoreToBillboard")
  category   Category[]  @relation("StoreToCategory")
  sizes      Size[]      @relation("StoreToSize")
  colors     Color[]     @relation("StoreToColor")
  products   Product[]   @relation("StoreToProduct")
  orders     Order[]     @relation("StoreToOrder")
  tags       Tag[]       @relation("StoreToTag")

  CalendarFloor   CalendarFloor[]   @relation("FloorToStore")
  CalendarRoom    CalendarRoom[]    @relation("RoomToStore")
  CalendarBooking CalendarBooking[] @relation("BookingToStore")

  StoreToUser StoreToUser[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Billboard {
  id         Int        @id @default(autoincrement())
  uuid       String     @unique @default(cuid())
  storeId    String
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [uuid])
  label      String
  imageUrl   String
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @default(now()) @updatedAt

  @@index([storeId])
}

model Category {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(cuid())
  name String

  storeId String
  store   Store  @relation("StoreToCategory", fields: [storeId], references: [uuid])

  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [uuid])

  products Product[] @relation("CateToProduct")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(cuid())

  storeId String
  store   Store  @relation("StoreToSize", fields: [storeId], references: [uuid])

  products Product[]

  name  String
  value String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([storeId])
}

model Color {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(cuid())

  storeId String
  store   Store  @relation("StoreToColor", fields: [storeId], references: [uuid])

  products Product[]

  name  String
  value String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([storeId])
}

model Product {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(cuid())

  name        String
  description String
  price       Decimal     @default(0)
  isFeatured  Boolean     @default(false)
  isArchived  Boolean     @default(false)
  images      Image[]
  orders      OrderItem[]

  categoryId String
  category   Category @relation("CateToProduct", fields: [categoryId], references: [uuid])

  tagId String
  tag   Tag    @relation("TagToProduct", fields: [tagId], references: [uuid])

  storeId String
  store   Store  @relation("StoreToProduct", fields: [storeId], references: [uuid])

  sizeId String
  size   Size   @relation(fields: [sizeId], references: [uuid])

  colorId String
  color   Color  @relation(fields: [colorId], references: [uuid])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([tagId])
  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Tag {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(cuid())

  name  String
  value String

  products Product[] @relation("TagToProduct")

  storeId String
  store   Store  @relation("StoreToTag", fields: [storeId], references: [uuid])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([storeId])
}

model Image {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(cuid())

  url String

  productId String
  product   Product @relation(fields: [productId], references: [uuid], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([productId])
}

model Order {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(cuid())

  orderItems OrderItem[]
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")

  storeId String
  store   Store  @relation("StoreToOrder", fields: [storeId], references: [uuid])

  total     Decimal  @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([storeId])
}

model OrderItem {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(cuid())

  orderId String
  order   Order  @relation(fields: [orderId], references: [uuid], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [uuid])

  @@index([orderId])
  @@index([productId])
}

model CalendarFloor {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(cuid())

  name  String
  value String

  floors CalendarRoom[]

  storeId String
  store   Store  @relation("FloorToStore", fields: [storeId], references: [uuid])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([storeId])
}

model CalendarRoom {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(cuid())

  title String
  slug  String
  price Decimal @default(0)

  floorId String?
  floor   CalendarFloor? @relation(fields: [floorId], references: [uuid])

  storeId String
  store   Store  @relation("RoomToStore", fields: [storeId], references: [uuid])

  bookings CalendarBooking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([floorId])
  @@index([storeId])
}

model CalendarBooking {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(cuid())

  title String

  group String
  room   CalendarRoom @relation(fields: [group], references: [uuid])

  userId String
  user   User   @relation(fields: [userId], references: [uuid])

  storeId String
  store   Store  @relation("BookingToStore", fields: [storeId], references: [uuid])

  start_time DateTime
  end_time   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([group])
  @@index([userId])
  @@index([storeId])
}
